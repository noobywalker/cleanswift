//
//  ListOrdersViewControllerTests.swift
//  CleanStore
//
//  Created by Waratnan Suriyasorn on 4/8/2559 BE.
//  Copyright (c) 2559 M Warat. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import CleanStore
import XCTest

class ListOrdersViewControllerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: ListOrdersViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    window = UIWindow()
    setupListOrdersViewController()
  }
  
  override func tearDown()
  {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupListOrdersViewController()
  {
    let bundle = NSBundle.mainBundle()
    let storyboard = UIStoryboard(name: "Main", bundle: bundle)
    sut = storyboard.instantiateViewControllerWithIdentifier("ListOrdersViewController") as! ListOrdersViewController
  }
  
  func loadView()
  {
    window.addSubview(sut.view)
    NSRunLoop.currentRunLoop().runUntilDate(NSDate())
  }
  
  // MARK: Test doubles
  class TableViewSpy: UITableView
  {
    // MARK: Method call expectations
    var reloadDataCalled = false
    
    // MARK: Spied methods
    override func reloadData()
    {
      reloadDataCalled = true
    }
  }
  
  class ListOrdersViewControllerOutputSpy: ListOrdersViewControllerOutput
  {
    // MARK: Method call expectations
    var orders: [Order]?
    var fetchOrdersCalled = false
    
    // MARK: Spied methods
    func fetchOrders(request: ListOrders_FetchOrders_Request) {
      fetchOrdersCalled = true
    }
  }

  // MARK: Tests
  
  func testShouldFetchOrdersWhenViewIsLoaded()
  {
    // Given
    let listOrdersViewControllerOutputSpy = ListOrdersViewControllerOutputSpy()
    sut.output = listOrdersViewControllerOutputSpy
    
    // When
    loadView()
    
    // Then
    XCTAssert(listOrdersViewControllerOutputSpy.fetchOrdersCalled, "Should fetch orders when the view is loaded")
  }
  
  
  func testShouldDisplayFetchedOrders()
  {
    // Given
    let tableViewSpy = TableViewSpy()
    sut.tableView = tableViewSpy
    
    let displayedOrders = [ListOrders_FetchOrders_ViewModel.DisplayedOrder(id: "abc123", date: "6/29/07", email: "amy.apple@clean-swift.com", name: "Amy Apple", total: "$1.23")]
    let viewModel = ListOrders_FetchOrders_ViewModel(displayedOrders: displayedOrders)
    
    // When
    sut.displayFetchedOrders(viewModel)
    
    // Then
    XCTAssert(tableViewSpy.reloadDataCalled, "Displaying fetched orders should reload the table view")
  }
  
  func testNumberOfSectionsInTableViewShouldAlwaysBeOne()
  {
    // Given
    let tableView = sut.tableView
    
    // When
    let numberOfSections = sut.numberOfSectionsInTableView(tableView)
    
    // Then
    XCTAssertEqual(numberOfSections, 1, "The number of table view sections should always be 1")
  }
  
  func testShouldConfigureTableViewCellToDisplayOrder()
  {
    // Given
    let tableView = sut.tableView
    let testDisplayedOrders = [ListOrders_FetchOrders_ViewModel.DisplayedOrder(id: "abc123", date: "6/29/07", email: "amy.apple@clean-swift.com", name: "Amy Apple", total: "$1.23")]
    sut.displayedOrders = testDisplayedOrders
    
    // When
    let indexPath = NSIndexPath(forRow: 0, inSection: 0)
    let cell = sut.tableView(tableView, cellForRowAtIndexPath: indexPath)
    
    // Then
    XCTAssertEqual(cell.textLabel?.text, "6/29/07", "A properly configured table view cell should display the order date")
    XCTAssertEqual(cell.detailTextLabel?.text, "$1.23", "A properly configured table view cell should display the order total")
  }
  
}
